#include <asf.h>
//#include "lcd.h"


#define SLAVE_ADDR       0x58

/*Prototypes*/
void clock_setup(void);
void port_setup(void);
void I2C_master_setup(void);
void I2C_master_transaction(void);

/* Global Variables */
volatile bool tx_done = false, rx_done = false;
volatile uint8_t tx_buf[] = {0x00, 0x00};	//second value is the dac value
volatile uint8_t *tx_buf_ptr;
// volatile char array[] = "hulloh hi hola como estas";
// volatile char *ptr;


int main (void){
	
	system_init();
 	clock_setup();
	port_setup();
	I2C_master_setup();
// 	lcd_port_setup();
// 	instruction_setup();
	
	//ptr = array;
	tx_buf_ptr = &tx_buf;
	I2C_master_transaction();
	
// 	while(*ptr != NULL){
// 		write_LCD(ptr++);
// 	}
	
	while(1){}
}

void clock_setup(void){
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET | SYSCTRL_INTFLAG_DFLLRDY;
	SYSCTRL->OSC8M.bit.PRESC = 0;	//divide the clock by 1
	SYSCTRL->OSC8M.bit.ONDEMAND = 1;	//clock is off is no peripheral request
	SYSCTRL->OSC8M.bit.RUNSTDBY = 0;	//clock is off in sleep mode
	SYSCTRL->OSC8M.reg |= 1<<1;	//enable clock
	//SYSCTRL->OSC8M.bit.FRANGE = 2;	//yet another way to control manipulate the clock freq
	
	SYSCTRL->OSC32K.bit.STARTUP = 0;	//start up asap
	SYSCTRL->OSC32K.bit.ONDEMAND = 1;	//clock is off if no peripheral request
	SYSCTRL->OSC32K.bit.RUNSTDBY = 1;	//clock is on in sleep mode
	SYSCTRL->OSC32K.bit.EN32K = 1;	//enable output
	SYSCTRL->OSC32K.reg |= 1<<1;	//enable clock
	
	GCLK->CTRL.bit.SWRST = 1;	//reset the generators
	while (GCLK->STATUS.bit.SYNCBUSY){}	//waiting for the reset to complete
	
	GCLK->GENDIV.reg = GCLK_GENDIV_ID(0) | GCLK_GENDIV_DIV(1);	//divide generator0 by 1
	GCLK->GENDIV.reg = GCLK_GENDIV_ID(1) | GCLK_GENDIV_DIV(1);	//divide generator1 by 1

	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(0) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_OE |
	GCLK_GENCTRL_SRC_OSC8M | GCLK_GENCTRL_RUNSTDBY;
	
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(1) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_OE |
	GCLK_GENCTRL_SRC_OSC32K | GCLK_GENCTRL_RUNSTDBY;
	
	while (GCLK->STATUS.bit.SYNCBUSY){}	//waiting for sync to complete
	GCLK->CLKCTRL.reg |= 0<<14;	//disable clock
	
	while (GCLK->STATUS.bit.SYNCBUSY){}	//waiting for sync to complete  
	GCLK->CLKCTRL.reg |= 0<<14;	//disable clock
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_SERCOM4_CORE | GCLK_CLKCTRL_GEN_GCLK0 | 1<<14;	//setup genclk for sercom4	
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_SERCOM0_CORE | GCLK_CLKCTRL_GEN_GCLK0 | 1<<14;	//setup genCLK for i2c
	/**************    May Not Be necessary   ***************/
	//GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_SERCOMX_SLOW| GCLK_CLKCTRL_GEN_GCLK0 | 1<<14;	//setup genCLK for i2c 
	while (GCLK->STATUS.bit.SYNCBUSY==1){}	//waiting for sync to complete  
		
	PM->CPUSEL.bit.CPUDIV = 0;	//divide CPU clock by 1	pg 15
	PM->APBASEL.bit.APBADIV = 0;	//divide apba bus by 1
	PM->APBBSEL.bit.APBBDIV = 0;	//divide apbb bus by 1 
	PM->APBCSEL.bit.APBCDIV = 0;	//divide apbc bus by 1
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM4;	
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;	



}

void port_setup(void){
	Port *por = PORT;
	PortGroup *porB = &(por->Group[1]);
	PortGroup *porA = &(por->Group[0]);
	
	/* I2C */
	porA->PMUX[4].bit.PMUXE = 2;	//Sercomm0 pad0 SDA PA08 
	porA->PINCFG[8].bit.PMUXEN =1;	//enable the MUX
	porA->PMUX[4].bit.PMUXO = 2;	//Sercomm0 PA09 pad1 SCL
	porA->PINCFG[9].bit.PMUXEN=1;	//enable the MUX
	

}

void I2C_master_setup(void){
	Sercom *ser = SERCOM0;
	SercomI2cm *i2c = &(ser->I2CM);
	i2c->CTRLA.reg = 0;	//disable first
	while(i2c->SYNCBUSY.reg);
	i2c->CTRLA.bit.SPEED = 0;	//select standard speed	100kHz Fscl
	i2c->CTRLA.bit.SDAHOLD = 2;
	i2c->CTRLA.bit.MODE = 5;	//i2c master mode
	i2c->CTRLB.bit.SMEN = 1;	//smart enable
	i2c->CTRLB.bit.ACKACT = 0;	//send ACK
	while(i2c->SYNCBUSY.reg);
	i2c->BAUD.bit.BAUD = 22;	//baud to 22	standard mde 100kHz
	i2c->BAUD.bit.BAUDLOW = 45;	 //baudlow to 45
	while(i2c->SYNCBUSY.reg);
	i2c->INTENSET.bit.MB = 1;	//master on bus
	i2c->CTRLA.reg |= 1<<1; //enable
	while(i2c->SYNCBUSY.reg);
	i2c->STATUS.bit.BUSSTATE = 1;	//force buss state into idle mode
	while(i2c->SYNCBUSY.reg);	
	NVIC->ISER[0] = 1 << 9;
}

void I2C_master_transaction(void){
	Sercom *ser = SERCOM0;
	SercomI2cm *i2c = &(ser->I2CM);
	
	i2c->ADDR.bit.ADDR = SLAVE_ADDR;	//write mode and address set
	while(i2c->SYNCBUSY.reg);
	while(!tx_done);
	tx_done = false;
}


/* I2C Master handler */
void SERCOM0_Handler(void){
	Sercom *ser = SERCOM0;
	SercomI2cm *i2c = &(ser->I2CM);
	static int i;
	
	/* If master on buss */
	if(i2c->INTFLAG.bit.MB){
		if(i < 2){
			i2c->DATA.reg = tx_buf[i++];
			while(i2c->SYNCBUSY.reg);
		}
		
		else{
			/* After transferring the last byte stop condition will be sent */ 
			i2c->CTRLB.bit.CMD = 0x3; 
			while(i2c->SYNCBUSY.reg);
			tx_done = true;
			i = 0;
		}
	}
}



